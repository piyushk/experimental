#!/usr/bin/env python

import actionlib
from actionlib_msgs.msg import GoalStatus
from bwi_msgs.srv import QuestionDialog, QuestionDialogRequest
import bwi_tools
from gazebo_msgs.srv import GetModelState, GetModelStateRequest
import math
import move_base_msgs.msg
from nav_error_task.srv import NavError, NavErrorResponse
import rospy
import sys
import tf.transformations

def add_two_ints_server():
    rospy.spin()

class NavErrorTaskManager():

    def __init__(self):
        rospy.init_node('nav_error_task')
        self.in_simulation = rospy.get_param('/use_sim_time', False)
        self.assume_start_pos_correct = rospy.get_param('~assume_start_pos_correct', False)
        self.global_frame_id = rospy.get_param('~global_frame_id', 'map')
        self.gazebo_model_name = rospy.get_param('~gazebo_model_name', 'segbot')
        if self.in_simulation:
            rospy.loginfo("NavErrorTaskManager: Running in simulation, waiting for gazebo get_model_state proxy...")
            self.get_model_state = rospy.ServiceProxy('gazebo/get_model_state', GetModelState)
            # rospy.wait_for_service(self.get_model_state)
            rospy.loginfo("NavErrorTaskManager: gazebo get_model_state proxy found.")
        else:
            rospy.loginfo("NavErrorTaskManager: Not running in simulation, waiting for segbot_gui...")
            self.gui_request = rospy.ServiceProxy('question_dialog', QuestionDialog)
            rospy.wait_for_service(self.gui_request)
            rospy.loginfo("NavErrorTaskManager: Gui found.")

        self.service_server = rospy.Service('nav_error_task', NavError, self.handle_nav_error_task_request)

    def handle_nav_error_task_request(self, req):
        amcl_params = {}

        if req.min_particles >= 0:
            amcl_params['min_particles'] = str(req.min_particles)
        if req.max_particles >= 0:
            amcl_params['max_particles'] = str(req.max_particles)
        if req.kld_err >= 0:
            amcl_params['kld_err'] = str(req.kld_err)
        if req.kld_z >= 0:
            amcl_params['kld_z'] = str(req.kld_z)
        if req.update_min_d >= 0:
            amcl_params['update_min_d'] = str(req.update_min_d)
        if req.update_min_a >= 0:
            amcl_params['update_min_a'] = str(req.update_min_a)
        if req.resample_interval >= 0:
            amcl_params['resample_interval'] = str(req.resample_interval)
        if req.recovery_alpha_slow >= 0:
            amcl_params['recovery_alpha_slow'] = str(req.recovery_alpha_slow)
        if req.recovery_alpha_fast >= 0:
            amcl_params['recovery_alpha_fast'] = str(req.recovery_alpha_fast)

        if self.in_simulation:
            model_state_request = GetModelStateRequest()
            model_state_request.model_name = self.gazebo_model_name
            model_state_response = self.get_model_state(model_state_request)
            if not model_state_response.success:
                rospy.logfatal("NavErrorTaskManager: Running in simulation, but unable to get pose of model '" +
                               self.gazebo_model_name +
                               "' from gazebo. Did you set the ~gazebo_model_name param correctly?")
                sys.exit(-1)
            amcl_params['initial_pose_x'] = str(model_state_response.pose.position.x)
            amcl_params['initial_pose_y'] = str(model_state_response.pose.position.y)
            model_angles = tf.transformations.euler_from_quaternion([model_state_response.pose.orientation.x,
                                                                     model_state_response.pose.orientation.y,
                                                                     model_state_response.pose.orientation.z,
                                                                     model_state_response.pose.orientation.w])
            amcl_params['initial_pose_a'] = str(model_angles[2])

        process = bwi_tools.start_roslaunch_process('nav_error_task', 'navigation.launch', amcl_params)

        # Wait for navigation server to become available
        client = actionlib.SimpleActionClient('move_base', move_base_msgs.msg.MoveBaseAction)
        rospy.loginfo("NavErrorTaskManager: Waiting for navigation server to become available...");
        client.wait_for_server()

        if not self.assume_start_pos_correct:
            dialog_request = QuestionDialogRequest()
            dialog_request.type = QuestionDialogRequest.CHOICE_QUESTION
            dialog_request.message = "Please mark the starting location of the robot in rviz and hit 'Done!'"
            dialog_request.options.append('Done!')
            dialog_request.timeout = QuestionDialogRequest.NO_TIMEOUT
            self.gui_request(dialog_request)
            pass

        response = NavErrorResponse()
        for task in req.tasks:
            goal = move_base_msgs.msg.MoveBaseGoal()
            goal.target_pose.pose = task
            goal.target_pose.header.frame_id = self.global_frame_id

            # Send goal and wait for result.
            client.send_goal(goal)

            finished_within_time = client.wait_for_result(timeout=rospy.Duration(secs=req.timeout_per_task))

            success = False
            error = 0.0
            if finished_within_time:
                if client.get_state() == GoalStatus.SUCCEEDED:
                    success = True

            rospy.loginfo("Trial success: " + str(success))
            # If the task was successful, figure out what the error in position was.
            if success:
                if self.in_simulation:
                    model_state_request = GetModelStateRequest()
                    model_state_request.model_name = self.gazebo_model_name
                    model_state_response = self.get_model_state(model_state_request)
                    target_x = task.position.x
                    target_y = task.position.y
                    actual_x = model_state_response.pose.position.x
                    actual_y = model_state_response.pose.position.y
                    error = math.sqrt((target_x - actual_x) * (target_x - actual_x) +
                                      (target_y - actual_y) * (target_y - actual_y))
                else:
                    message = "Trial completed! Please enter error from true position:"
                    while True:
                        dialog_request = QuestionDialogRequest()
                        dialog_request.type = QuestionDialogRequest.TEXT_QUESTION
                        dialog_request.message = message
                        dialog_request.timeout = QuestionDialogRequest.NO_TIMEOUT
                        dialog_response = self.gui_request(dialog_request)
                        try:
                            error = float(dialog_response.text)
                            break
                        except ValueError:
                            message = "Please enter floating point value only! Please enter error from true position:"

                rospy.loginfo("  Trial Error: " + str(error))

            response.success.append(success)
            response.error.append(error)

        bwi_tools.stop_roslaunch_process(process)

        return response

    def start(self):
        rospy.spin()

if __name__ == "__main__":
    manager = NavErrorTaskManager()
    manager.start()
